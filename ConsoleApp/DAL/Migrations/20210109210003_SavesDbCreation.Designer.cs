// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210109210003_SavesDbCreation")]
    partial class SavesDbCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Domain.Objects.BattleFlotillasObject", b =>
                {
                    b.Property<int>("BattleFlotillasObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BattleShipsObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlotillaHealth")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PropertiesFlotillasObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShipCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("BattleFlotillasObjectId");

                    b.HasIndex("BattleShipsObjectId");

                    b.HasIndex("PropertiesFlotillasObjectId");

                    b.ToTable("Flotillas");
                });

            modelBuilder.Entity("Domain.Objects.BattlePropertiesObject", b =>
                {
                    b.Property<int>("BattlePropertiesObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BattleHistory")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrentPlayer")
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<string>("GameMode")
                        .HasColumnType("TEXT");

                    b.Property<string>("MenuOptions")
                        .HasColumnType("TEXT");

                    b.Property<string>("Player1FieldArray")
                        .HasColumnType("TEXT");

                    b.Property<string>("Player1Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Player2FieldArray")
                        .HasColumnType("TEXT");

                    b.Property<string>("Player2Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Round")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SelectableRowCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("BattlePropertiesObjectId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Domain.Objects.BattleShipsObject", b =>
                {
                    b.Property<int>("BattleShipsObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlotillaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipCellsArray")
                        .HasColumnType("TEXT");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("BattleShipsObjectId");

                    b.HasIndex("FlotillaId");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("Domain.Objects.PropertiesFlotillasObject", b =>
                {
                    b.Property<int>("PropertiesFlotillasObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BattleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlotillaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PropertiesFlotillasObjectId");

                    b.HasIndex("BattleId");

                    b.HasIndex("FlotillaId");

                    b.ToTable("PropertiesFlotillas");
                });

            modelBuilder.Entity("Domain.Objects.SaveObject", b =>
                {
                    b.Property<int>("SaveObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BattlePropertiesObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SaveName")
                        .HasColumnType("TEXT");

                    b.HasKey("SaveObjectId");

                    b.HasIndex("BattlePropertiesObjectId");

                    b.ToTable("Saves");
                });

            modelBuilder.Entity("Domain.Objects.BattleFlotillasObject", b =>
                {
                    b.HasOne("Domain.Objects.BattleShipsObject", null)
                        .WithMany("BattleFlotillas")
                        .HasForeignKey("BattleShipsObjectId");

                    b.HasOne("Domain.Objects.PropertiesFlotillasObject", null)
                        .WithMany("BattleFlotillas")
                        .HasForeignKey("PropertiesFlotillasObjectId");
                });

            modelBuilder.Entity("Domain.Objects.BattleShipsObject", b =>
                {
                    b.HasOne("Domain.Objects.BattleFlotillasObject", "Flotilla")
                        .WithMany()
                        .HasForeignKey("FlotillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flotilla");
                });

            modelBuilder.Entity("Domain.Objects.PropertiesFlotillasObject", b =>
                {
                    b.HasOne("Domain.Objects.BattlePropertiesObject", "Battle")
                        .WithMany("PropertiesFlotillas")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Objects.BattleFlotillasObject", "Flotilla")
                        .WithMany()
                        .HasForeignKey("FlotillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battle");

                    b.Navigation("Flotilla");
                });

            modelBuilder.Entity("Domain.Objects.SaveObject", b =>
                {
                    b.HasOne("Domain.Objects.BattlePropertiesObject", "BattleProperties")
                        .WithMany()
                        .HasForeignKey("BattlePropertiesObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BattleProperties");
                });

            modelBuilder.Entity("Domain.Objects.BattlePropertiesObject", b =>
                {
                    b.Navigation("PropertiesFlotillas");
                });

            modelBuilder.Entity("Domain.Objects.BattleShipsObject", b =>
                {
                    b.Navigation("BattleFlotillas");
                });

            modelBuilder.Entity("Domain.Objects.PropertiesFlotillasObject", b =>
                {
                    b.Navigation("BattleFlotillas");
                });
#pragma warning restore 612, 618
        }
    }
}
